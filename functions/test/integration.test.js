/**
 * Integration Tests for AI PowerPoint Generator
 * 
 * Tests the complete flow from API endpoints through to PowerPoint generation,
 * including AI service integration and file generation.
 * 
 * @version 1.0.0
 * @author AI PowerPoint Generator Team
 */

const request = require('supertest');
const { describe, it, expect, beforeAll, afterAll, jest } = require('@jest/globals');

// Mock Firebase and external services for integration testing
jest.mock('firebase-functions/logger', () => ({
  info: jest.fn(),
  error: jest.fn(),
  warn: jest.fn()
}));

jest.mock('firebase-functions/params', () => ({
  defineSecret: jest.fn(() => ({ value: () => 'mock-openai-key' }))
}));

// Mock OpenAI for predictable testing
jest.mock('openai', () => {
  return jest.fn().mockImplementation(() => ({
    chat: {
      completions: {
        create: jest.fn().mockResolvedValue({
          choices: [{
            message: {
              content: JSON.stringify({
                title: 'AI-Generated Test Slide',
                layout: 'title-paragraph',
                paragraph: 'This is a test paragraph generated by the mocked AI service.',
                notes: 'Test speaker notes',
                sources: ['Test source']
              })
            }
          }]
        })
      }
    },
    images: {
      generate: jest.fn().mockResolvedValue({
        data: [{
          url: 'https://example.com/test-image.jpg'
        }]
      })
    }
  }));
});

// Import the Express app
const app = require('../src/index');

describe('API Integration Tests', () => {
  let server;

  beforeAll(() => {
    // Start the server for testing
    server = app.listen(0); // Use random port
  });

  afterAll(() => {
    if (server) {
      server.close();
    }
  });

  describe('Draft Generation Endpoint', () => {
    it('should generate a slide draft successfully', async () => {
      const response = await request(app)
        .post('/draft')
        .send({
          prompt: 'Create a slide about quarterly sales results',
          audience: 'executives',
          tone: 'professional',
          contentLength: 'moderate'
        })
        .expect(200);

      expect(response.body).toHaveProperty('title');
      expect(response.body).toHaveProperty('layout');
      expect(response.body.title).toBeTruthy();
      expect(response.body.layout).toBeTruthy();
    });

    it('should handle enhanced parameters', async () => {
      const response = await request(app)
        .post('/draft')
        .send({
          prompt: 'Healthcare safety presentation',
          audience: 'healthcare',
          tone: 'authoritative',
          contentLength: 'comprehensive',
          industry: 'healthcare',
          presentationType: 'training',
          withImage: true,
          imageStyle: 'professional'
        })
        .expect(200);

      expect(response.body).toHaveProperty('title');
      expect(response.body).toHaveProperty('layout');
    });

    it('should validate input parameters', async () => {
      const response = await request(app)
        .post('/draft')
        .send({
          prompt: 'Too short', // Less than 10 characters
          audience: 'invalid-audience',
          tone: 'invalid-tone'
        })
        .expect(400);

      expect(response.body).toHaveProperty('error');
      expect(response.body).toHaveProperty('code', 'VALIDATION_ERROR');
      expect(response.body).toHaveProperty('details');
    });

    it('should handle missing required fields', async () => {
      const response = await request(app)
        .post('/draft')
        .send({
          // Missing prompt
          audience: 'general'
        })
        .expect(400);

      expect(response.body).toHaveProperty('error');
      expect(response.body.code).toBe('VALIDATION_ERROR');
    });
  });

  describe('Content Validation Endpoint', () => {
    it('should validate slide content successfully', async () => {
      const slideSpec = {
        title: 'Test Slide for Validation',
        layout: 'title-bullets',
        bullets: [
          'First bullet point with good content',
          'Second bullet point with more details',
          'Third bullet point for completeness'
        ],
        notes: 'Speaker notes for this slide',
        sources: ['Test source 1', 'Test source 2']
      };

      const response = await request(app)
        .post('/validate')
        .send(slideSpec)
        .expect(200);

      expect(response.body).toHaveProperty('results');
      expect(response.body).toHaveProperty('summary');
      expect(response.body.results).toBeInstanceOf(Array);
      expect(response.body.results[0]).toHaveProperty('quality');
      expect(response.body.results[0]).toHaveProperty('improvements');
    });

    it('should validate multiple slides', async () => {
      const multipleSlides = [
        {
          title: 'First Slide',
          layout: 'title-paragraph',
          paragraph: 'Content for the first slide with sufficient detail.',
          notes: 'Notes for first slide',
          sources: []
        },
        {
          title: 'Second Slide',
          layout: 'title-bullets',
          bullets: ['Bullet 1', 'Bullet 2', 'Bullet 3'],
          notes: 'Notes for second slide',
          sources: []
        }
      ];

      const response = await request(app)
        .post('/validate')
        .send(multipleSlides)
        .expect(200);

      expect(response.body.results).toHaveLength(2);
      expect(response.body.summary.totalSlides).toBe(2);
    });

    it('should identify content quality issues', async () => {
      const poorSlide = {
        title: 'Bad', // Too short
        layout: 'title-bullets',
        bullets: Array(12).fill('Too many bullets'), // Too many bullets
        notes: '',
        sources: []
      };

      const response = await request(app)
        .post('/validate')
        .send(poorSlide)
        .expect(200);

      const quality = response.body.results[0].quality;
      expect(quality.score).toBeLessThan(80);
      expect(quality.warnings.length).toBeGreaterThan(0);
    });
  });

  describe('Theme Management Endpoints', () => {
    it('should retrieve all themes', async () => {
      const response = await request(app)
        .get('/themes')
        .expect(200);

      expect(response.body).toHaveProperty('themes');
      expect(response.body).toHaveProperty('categories');
      expect(response.body.themes).toBeInstanceOf(Array);
      expect(response.body.themes.length).toBeGreaterThan(0);
    });

    it('should filter themes by category', async () => {
      const response = await request(app)
        .get('/themes?category=corporate')
        .expect(200);

      expect(response.body.themes).toBeInstanceOf(Array);
      response.body.themes.forEach(theme => {
        expect(theme.category).toBe('corporate');
      });
    });

    it('should provide theme recommendations', async () => {
      const response = await request(app)
        .post('/themes/recommend')
        .send({
          audience: 'executives',
          industry: 'finance',
          presentationType: 'report',
          hasCharts: true,
          isDataHeavy: true
        })
        .expect(200);

      expect(response.body).toHaveProperty('recommendations');
      expect(response.body).toHaveProperty('reasons');
      expect(response.body).toHaveProperty('dynamicSelection');
      expect(response.body.recommendations).toBeInstanceOf(Array);
      expect(response.body.reasons).toBeInstanceOf(Array);
    });
  });

  describe('Performance Metrics Endpoint', () => {
    it('should retrieve performance metrics', async () => {
      // First make a few requests to generate metrics
      await request(app)
        .post('/draft')
        .send({
          prompt: 'Test slide for metrics',
          audience: 'general',
          tone: 'professional',
          contentLength: 'brief'
        });

      const response = await request(app)
        .get('/metrics')
        .expect(200);

      expect(response.body).toHaveProperty('stats');
      expect(response.body).toHaveProperty('systemInfo');
      expect(response.body.stats).toHaveProperty('totalRequests');
      expect(response.body.stats).toHaveProperty('successfulRequests');
      expect(response.body.stats).toHaveProperty('averageResponseTime');
    });
  });

  describe('PowerPoint Generation Endpoint', () => {
    it('should generate PowerPoint from slide spec', async () => {
      const slideSpec = {
        title: 'Test PowerPoint Generation',
        layout: 'title-paragraph',
        paragraph: 'This slide will be converted to PowerPoint format.',
        notes: 'Speaker notes for PowerPoint',
        sources: ['Test source']
      };

      const response = await request(app)
        .post('/generate')
        .send({ spec: slideSpec })
        .expect(200);

      expect(response.headers['content-type']).toContain('application/vnd.openxmlformats');
      expect(response.headers['content-disposition']).toContain('attachment');
      expect(Buffer.isBuffer(response.body)).toBe(true);
    });

    it('should generate PowerPoint from parameters', async () => {
      const response = await request(app)
        .post('/generate')
        .send({
          prompt: 'Create a slide about company overview',
          audience: 'general',
          tone: 'professional',
          contentLength: 'moderate'
        })
        .expect(200);

      expect(response.headers['content-type']).toContain('application/vnd.openxmlformats');
      expect(Buffer.isBuffer(response.body)).toBe(true);
    });

    it('should handle invalid slide specifications', async () => {
      const invalidSpec = {
        title: '', // Invalid title
        layout: 'invalid-layout'
      };

      const response = await request(app)
        .post('/generate')
        .send({ spec: invalidSpec })
        .expect(400);

      expect(response.body).toHaveProperty('error');
      expect(response.body.code).toBe('INVALID_SPEC_ERROR');
    });
  });

  describe('Error Handling', () => {
    it('should handle malformed JSON', async () => {
      const response = await request(app)
        .post('/draft')
        .set('Content-Type', 'application/json')
        .send('{ invalid json }')
        .expect(400);

      expect(response.body).toHaveProperty('error');
    });

    it('should handle large payloads gracefully', async () => {
      const largePrompt = 'A'.repeat(3000); // Exceeds max length
      
      const response = await request(app)
        .post('/draft')
        .send({
          prompt: largePrompt,
          audience: 'general'
        })
        .expect(400);

      expect(response.body).toHaveProperty('error');
      expect(response.body.code).toBe('VALIDATION_ERROR');
    });

    it('should return 404 for unknown endpoints', async () => {
      await request(app)
        .get('/unknown-endpoint')
        .expect(404);
    });
  });
});
