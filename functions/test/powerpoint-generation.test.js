/**
 * Comprehensive PowerPoint Generation Test Suite
 * 
 * Tests for enhanced PowerPoint generation system including:
 * - Core generation functionality
 * - Advanced layout engine
 * - Professional theme system
 * - Accessibility compliance
 * - Chart and table generation
 * - Quality assurance
 * 
 * @version 1.0.0
 * @author AI PowerPoint Generator Team
 */

const { describe, it, expect, beforeEach, afterEach } = require('@jest/globals');

// Mock Firebase functions for testing
jest.mock('firebase-functions/logger', () => ({
  info: jest.fn(),
  error: jest.fn(),
  warn: jest.fn(),
  debug: jest.fn()
}));

jest.mock('firebase-functions/params', () => ({
  defineSecret: jest.fn(() => ({ value: () => 'mock-secret' }))
}));

// Import modules to test
const {
  generateSimplePpt
} = require('../lib/pptGenerator-simple');

const {
  PROFESSIONAL_THEMES,
  getThemeById,
  selectThemeForContent,
  validateThemeAccessibility,
  generateColorPalette
} = require('../lib/professionalThemes');

const {
  EnhancedPowerPointService
} = require('../lib/services/enhancedPowerPointService');

describe('PowerPoint Generation System', () => {
  describe('Core Generation Engine', () => {
    it('should generate a basic PowerPoint presentation', async () => {
      const slides = [
        {
          title: 'Test Presentation',
          layout: 'title',
          paragraph: 'This is a test presentation generated by the enhanced system.'
        },
        {
          title: 'Key Features',
          layout: 'title-bullets',
          bullets: [
            'Enhanced layout engine with responsive design',
            'Professional theme system with accessibility compliance',
            'Advanced typography and visual hierarchy',
            'Native chart and table support'
          ]
        }
      ];

      const buffer = await generateSimplePpt(slides, true, 'corporate-blue');
      
      expect(buffer).toBeDefined();
      expect(buffer.length).toBeGreaterThan(1000); // Minimum file size
      expect(Buffer.isBuffer(buffer)).toBe(true);
      
      // Check PowerPoint file signature
      const header = buffer.slice(0, 4).toString('hex');
      expect(header).toBe('504b0304'); // ZIP file signature for PPTX
    }, 30000);

    it('should handle different slide layouts correctly', async () => {
      const layouts = ['title', 'title-bullets', 'title-paragraph', 'two-column', 'chart', 'quote'];
      
      for (const layout of layouts) {
        const slides = [{
          title: `Test ${layout} Layout`,
          layout: layout,
          paragraph: 'Test content for layout validation',
          bullets: ['Test bullet 1', 'Test bullet 2', 'Test bullet 3']
        }];

        const buffer = await generateSimplePpt(slides, true);
        expect(buffer).toBeDefined();
        expect(buffer.length).toBeGreaterThan(500);
      }
    }, 45000);

    it('should generate presentations with enhanced layout options', async () => {
      const slides = [
        {
          title: 'Data-Heavy Content',
          layout: 'chart',
          bullets: [
            'Q1 2024: $1.2M revenue',
            'Q2 2024: $1.5M revenue', 
            'Q3 2024: $1.8M revenue',
            'Q4 2024: $2.1M revenue'
          ]
        },
        {
          title: 'Comparison Table',
          layout: 'comparison-table',
          bullets: [
            'Feature A: Basic plan includes',
            'Feature B: Premium plan includes',
            'Feature C: Enterprise plan includes'
          ]
        }
      ];

      const buffer = await generateSimplePpt(slides, true, 'finance-navy');
      expect(buffer).toBeDefined();
      expect(buffer.length).toBeGreaterThan(1000);
    }, 30000);
  });

  describe('Enhanced Theme System', () => {
    it('should validate theme accessibility correctly', () => {
      const theme = getThemeById('corporate-blue');
      const validation = validateThemeAccessibility(theme);

      expect(validation).toBeDefined();
      expect(validation.isAccessible).toBeDefined();
      expect(validation.issues).toBeInstanceOf(Array);
      expect(validation.suggestions).toBeInstanceOf(Array);

      // Check basic validation structure
      expect(typeof validation.isAccessible).toBe('boolean');
      expect(validation.issues.length).toBeGreaterThanOrEqual(0);
      expect(validation.suggestions.length).toBeGreaterThanOrEqual(0);
    });

    it('should create accessible themes with proper contrast', () => {
      // Test with existing accessible theme
      const accessibleTheme = getThemeById('corporate-blue');

      expect(accessibleTheme).toBeDefined();
      expect(accessibleTheme.id).toBe('corporate-blue');

      const validation = validateThemeAccessibility(accessibleTheme);
      expect(validation.isAccessible).toBe(true);
    });

    it('should select appropriate themes based on content requirements', () => {
      // Test data-heavy content selection
      const dataTheme = selectThemeForContent({
        isDataHeavy: true,
        requireAccessibility: true
      });
      expect(dataTheme).toBeDefined();
      
      // Test creative content selection
      const creativeTheme = selectThemeForContent({
        isCreative: true,
        tone: 'inspiring'
      });
      expect(creativeTheme).toBeDefined();
      expect(creativeTheme.category).toMatch(/creative|vibrant|modern/);
      
      // Test accessibility-first selection
      const accessibleTheme = selectThemeForContent({
        isDataHeavy: true
      });
      expect(accessibleTheme).toBeDefined();

      const validation = validateThemeAccessibility(accessibleTheme);
      expect(validation.isAccessible).toBe(true);
    });

    it('should generate harmonious color palettes', () => {
      const palette = generateColorPalette('#1E40AF');

      expect(palette).toBeDefined();
      expect(palette.primary).toBe('#1E40AF');
      expect(palette.secondary).toMatch(/^#[0-9A-F]{6}$/);
      expect(palette.accent).toMatch(/^#[0-9A-F]{6}$/);
      expect(palette.background).toMatch(/^#[0-9A-F]{6}$/);
      expect(palette.surface).toMatch(/^#[0-9A-F]{6}$/);
    });
  });

  describe('Enhanced PowerPoint Service', () => {
    let enhancedService;

    beforeEach(() => {
      enhancedService = new EnhancedPowerPointService();
    });

    it('should generate presentations with all enhancements', async () => {
      const slides = [
        {
          title: 'Enhanced Presentation Test',
          layout: 'title',
          paragraph: 'Testing the enhanced PowerPoint service with all features enabled.'
        },
        {
          title: 'Feature Showcase',
          layout: 'title-bullets',
          bullets: [
            'Professional metadata integration',
            'Advanced speaker notes generation',
            'Native chart and table support',
            'Quality optimization and validation'
          ]
        }
      ];

      const theme = getThemeById('corporate-blue');
      const result = await enhancedService.generatePresentation(slides, {
        theme,
        includeNotes: true,
        includeMetadata: true,
        enableCharts: true,
        enableTables: true,
        quality: 'high',
        optimizeFileSize: true
      });

      expect(result).toBeDefined();
      expect(result.buffer).toBeDefined();
      expect(result.metadata).toBeDefined();
      expect(result.quality).toBeDefined();
      expect(result.warnings).toBeInstanceOf(Array);
      
      // Check metadata
      expect(result.metadata.slideCount).toBe(2);
      expect(result.metadata.fileSize).toBeGreaterThan(1000);
      expect(result.metadata.theme).toBe('Corporate Professional');
      expect(result.metadata.features).toBeInstanceOf(Array);
      
      // Check quality metrics
      expect(result.quality.speakerNotesGenerated).toBeGreaterThanOrEqual(0);
      expect(result.quality.optimizationApplied).toBe(true);
    }, 45000);
  });
});
