
================================================================================
🎯 AI POWERPOINT GENERATOR - COMPLETE CODE REVIEW
================================================================================

This document contains all the core PowerPoint generation code in logical 
execution order, from API request to final PPTX file creation.

EXECUTION FLOW:
1. API Request → index.ts (Express endpoints)
2. Input Validation → schema.ts (Zod validation)  
3. AI Processing → llm.ts + prompts.ts (OpenAI integration)
4. Theme Selection → professionalThemes.ts (Styling)
5. Slide Generation → slides/index.ts (Layout logic)
6. PowerPoint Creation → pptGenerator.ts (PptxGenJS integration)

================================================================================


================================================================================
1. 🚀 API ENTRY POINT - Main Express app with endpoints (/draft, /generate)
FILE: functions/src/index.ts
================================================================================


------------------------------------------------------------
SECTION: Imports and setup (lines 1-100)
------------------------------------------------------------

📊 FILE STATS: 100 lines shown (668 total lines)

   1: /**
   2:  * AI PowerPoint Generator - Firebase Cloud Functions Backend
   3:  *
   4:  * CORE FUNCTIONALITY:
   5:  * This is the main backend service that provides RESTful API endpoints for AI-powered
   6:  * PowerPoint slide generation. The service uses OpenAI's GPT-4 for content generation
   7:  * and DALL-E 3 for image creation, with comprehensive error handling and performance monitoring.
   8:  *
   9:  * KEY FEATURES:
  10:  * - Multi-step AI generation pipeline: content → layout → images → refinement
  11:  * - Professional PowerPoint (.pptx) file creation using PptxGenJS
  12:  * - Advanced styling with theme system and brand customization
  13:  * - Comprehensive input validation using Zod schemas
  14:  * - Performance monitoring and detailed logging
  15:  * - Rate limiting and security headers for production use
  16:  *
  17:  * API ENDPOINTS:
  18:  * - GET /health - Service health check
  19:  * - POST /draft - Generate slide content draft for preview
  20:  * - POST /generate - Create final PowerPoint file from slide specification
  21:  * - POST /validate-content - Validate slide content quality
  22:  * - POST /themes - Get theme recommendations based on content
  23:  * - GET /metrics - Performance metrics (admin only)
  24:  *
  25:  * ARCHITECTURE:
  26:  * - Express.js application wrapped in Firebase Cloud Function
  27:  * - Stateless design with no database dependencies
  28:  * - OpenAI API integration with retry logic and fallback strategies
  29:  * - Comprehensive error handling with typed error classes
  30:  * - Memory-efficient caching for theme recommendations
  31:  *
  32:  * @version 3.3.2-enhanced-fixed
  33:  * @author AI PowerPoint Generator Team
  34:  */
  35: 
  36: import { setGlobalOptions } from "firebase-functions";
  37: import { onRequest } from "firebase-functions/v2/https";
  38: import { logger } from "firebase-functions";
  39: import { defineSecret } from "firebase-functions/params";
  40: import express from "express";
  41: import cors from "cors";
  42: import rateLimit from "express-rate-limit";
  43: import helmet from "helmet";
  44: import compression from "compression";
  45: 
  46: // Import enhanced core modules with error types
  47: import { generateSlideSpec, AIGenerationError, ValidationError, TimeoutError } from "./llm";
  48: import { generatePpt } from "./pptGenerator";
  49: import { safeValidateGenerationParams, safeValidateSlideSpec, validateContentQuality, generateContentImprovements, type SlideSpec } from "./schema";
  50: import { PROFESSIONAL_THEMES, selectThemeForContent } from "./professionalThemes";
  51: import { debugLogger, DebugCategory } from "./utils/debugLogger";
  52: // Layout planning imports
  53: import { buildSlide, type SlideConfig, type SlideType } from './slides';
  54: import { getTheme as getCoreTheme } from './core/theme/themes';
  55: 
  56: // Production-ready configuration constants
  57: const CONFIG = {
  58:   maxInstances: 20,
  59:   requestSizeLimit: '20mb',
  60:   timeout: 540,
  61:   memory: "2GiB" as const,
  62:   rateLimit: {
  63:     windowMs: 15 * 60 * 1000, // 15 minutes
  64:     max: 100, // limit each IP to 100 requests per windowMs
  65:     standardHeaders: true,
  66:     legacyHeaders: false,
  67:     message: {
  68:       error: 'Too many requests from this IP, please try again later.',
  69:       retryAfter: '15 minutes'
  70:     },
  71:     // Skip rate limiting in Firebase Functions environment
  72:     skip: (req: any) => {
  73:       // Skip if in development or if running in Firebase Functions
  74:       return process.env.NODE_ENV === 'development' ||
  75:              process.env.FUNCTIONS_EMULATOR === 'true' ||
  76:              !req.ip;
  77:     },
  78:     // Custom key generator for Firebase Functions
  79:     keyGenerator: (req: any) => {
  80:       return req.ip || req.headers['x-forwarded-for'] || req.connection?.remoteAddress || 'unknown';
  81:     }
  82:   },
  83:   cors: {
  84:     origin: process.env.NODE_ENV === 'production'
  85:       ? ['https://your-domain.com', 'https://ai-ppt-gen.web.app']
  86:       : true,
  87:     credentials: true,
  88:     optionsSuccessStatus: 200
  89:   },
  90:   security: {
  91:     contentSecurityPolicy: {
  92:       directives: {
  93:         defaultSrc: ["'self'"],
  94:         styleSrc: ["'self'", "'unsafe-inline'"],
  95:         scriptSrc: ["'self'"],
  96:         imgSrc: ["'self'", "data:", "https:"],
  97:         connectSrc: ["'self'", "https://api.openai.com"]
  98:       }
  99:     },
 100:     hsts: {


------------------------------------------------------------
SECTION: PowerPoint generation endpoint (lines 500-650)
------------------------------------------------------------

📊 FILE STATS: 151 lines shown (668 total lines)

 500:       stack: error instanceof Error ? error.stack : undefined
 501:     });
 502: 
 503:     endPerformanceTracking(performanceMetric, false, 'VALIDATION_SERVICE_ERROR');
 504:     return res.status(500).json({
 505:       error: 'Content validation failed. Please try again.',
 506:       code: 'VALIDATION_SERVICE_ERROR'
 507:     });
 508:   }
 509: });
 510: 
 511: /**
 512:  * PowerPoint file generation endpoint
 513:  */
 514: app.post('/generate', async (req, res) => {
 515:   const performanceMetric = startPerformanceTracking('/generate', req);
 516: 
 517:   try {
 518:     logger.info('PowerPoint generation request', {
 519:       hasSpec: !!req.body.spec,
 520:       directGeneration: !req.body.spec,
 521:       themeId: req.body.themeId,
 522:       withValidation: req.body.withValidation ?? true,
 523:       timestamp: new Date().toISOString()
 524:     });
 525: 
 526:     let spec: SlideSpec | SlideSpec[];
 527:     let slideCount = 1;
 528:     let themeUsed = req.body.themeId || 'default';
 529: 
 530:     if (Array.isArray(req.body.spec)) {
 531:       const specArray = req.body.spec as unknown[]; // Safe cast from any
 532:       const validatedSpecs: SlideSpec[] = [];
 533:       const validationErrors: string[][] = [];
 534: 
 535:       for (const s of specArray) {
 536:         const v = safeValidateSlideSpec(s);
 537:         if (!v.success) {
 538:           validationErrors.push(v.errors || ['Unknown validation error']);
 539:         } else {
 540:           validatedSpecs.push(v.data as SlideSpec);
 541:         }
 542:       }
 543: 
 544:       if (validationErrors.length > 0) {
 545:         logger.warn('Invalid slide specifications provided', { errors: validationErrors });
 546:         endPerformanceTracking(performanceMetric, false, 'INVALID_SPEC_ERROR');
 547:         return res.status(400).json({
 548:           error: 'Invalid slide specifications provided',
 549:           code: 'INVALID_SPEC_ERROR',
 550:           details: validationErrors
 551:         });
 552:       }
 553: 
 554:       spec = validatedSpecs;
 555:     } else {
 556:       const validation = safeValidateSlideSpec(req.body.spec);
 557:       if (!validation.success) {
 558:         logger.warn('Invalid slide specification provided', { errors: validation.errors });
 559:         endPerformanceTracking(performanceMetric, false, 'INVALID_SPEC_ERROR');
 560:         return res.status(400).json({
 561:           error: 'Invalid slide specification provided',
 562:           code: 'INVALID_SPEC_ERROR',
 563:           details: validation.errors
 564:         });
 565:       }
 566: 
 567:       spec = validation.data as SlideSpec;
 568:     }
 569: 
 570:     slideCount = Array.isArray(spec) ? spec.length : 1;
 571: 
 572:     // Guard against undefined or empty spec
 573:     if (!spec || (Array.isArray(spec) && spec.length === 0)) {
 574:       logger.error('Internal error: spec not defined or empty');
 575:       endPerformanceTracking(performanceMetric, false, 'INTERNAL_ERROR');
 576:       return res.status(500).json({
 577:         error: 'Internal error: No valid specification provided',
 578:         code: 'INTERNAL_ERROR'
 579:       });
 580:     }
 581: 
 582:     // Auto-select theme if not provided
 583:     if (!req.body.themeId) {
 584:       const firstSpec = Array.isArray(spec) ? spec[0] : spec;
 585:       const contentAnalysis = { presentationType: firstSpec.layout };
 586:       themeUsed = selectThemeForContent(contentAnalysis).id;
 587:       logger.info(`Auto-selected theme: ${themeUsed}`);
 588:     }
 589: 
 590:     // Generate PowerPoint file
 591:     const pptBuffer = await generatePpt(Array.isArray(spec) ? spec : [spec], req.body.withValidation ?? true);
 592: 
 593:     // Configure response headers
 594:     const firstSpec = Array.isArray(spec) ? spec[0] : spec;
 595:     const sanitizedTitle = firstSpec.title?.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_') || 'presentation';
 596:     const filename = `${sanitizedTitle}.pptx`;
 597: 
 598:     res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
 599:     res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.presentationml.presentation');
 600:     res.setHeader('Content-Length', pptBuffer.length.toString());
 601: 
 602:     logger.info('PowerPoint generation successful', {
 603:       filename,
 604:       fileSize: pptBuffer.length,
 605:       slideTitle: sanitizedTitle,
 606:       slideCount,
 607:       themeUsed
 608:     });
 609: 
 610:     endPerformanceTracking(performanceMetric, true, undefined, { slideCount, themeUsed, aiSteps: 4 });
 611:     return res.send(pptBuffer);
 612:   } catch (error) {
 613:     let status = 500;
 614:     let code = 'PPT_GENERATION_ERROR';
 615:     let message = 'Failed to generate PowerPoint file. Please check your slide content and try again.';
 616: 
 617:     if (error instanceof AIGenerationError) {
 618:       status = 503;
 619:       code = 'AI_SERVICE_ERROR';
 620:       message = 'AI service temporarily unavailable during PowerPoint generation.';
 621:       logger.error('AI generation failed during PPT creation', {
 622:         step: error.step,
 623:         attempt: error.attempt,
 624:         message: error.message
 625:       });
 626:     } else if (error instanceof ValidationError) {
 627:       status = 422;
 628:       code = 'CONTENT_VALIDATION_ERROR';
 629:       message = 'Generated content failed validation during PowerPoint creation.';
 630:       logger.error('Content validation failed during PPT creation', {
 631:         message: error.message,
 632:         validationErrors: error.validationErrors
 633:       });
 634:     } else if (error instanceof TimeoutError) {
 635:       status = 408;
 636:       code = 'TIMEOUT_ERROR';
 637:       message = 'PowerPoint generation timed out. Please try again.';
 638:       logger.error('Timeout during PPT generation', {
 639:         message: error.message,
 640:         timeoutMs: error.timeoutMs
 641:       });
 642:     } else {
 643:       logger.error('PowerPoint generation failed', {
 644:         error: error instanceof Error ? error.message : String(error),
 645:         stack: error instanceof Error ? error.stack : undefined,
 646:         hasSpec: !!req.body.spec,
 647:         timestamp: new Date().toISOString()
 648:       });
 649:     }
 650: 


================================================================================
2. 📋 INPUT VALIDATION - Zod schemas for request/response validation
FILE: functions/src/schema.ts
================================================================================


------------------------------------------------------------
SECTION: SlideSpec schema definition (lines 70-150)
------------------------------------------------------------

📊 FILE STATS: 81 lines shown (758 total lines)

  70:   emphasis: z.enum(['normal', 'bold', 'italic', 'highlight']).optional(),
  71:   color: VALIDATION_PATTERNS.colorHex.optional(),
  72:   iconName: z.string().max(50, 'Icon name too long').optional() // New: Support for icon names
  73: });
  74: 
  75: /**
  76:  * Core slide specification schema with enhanced layout and content support
  77:  * Defines the structure for AI-generated slide content with comprehensive validation
  78:  */
  79: export const SlideSpecSchema = z.object({
  80:   /** Main slide title - clear, concise, and engaging */
  81:   title: VALIDATION_PATTERNS.title,
  82: 
  83:   /** Layout type - comprehensive support for various presentation needs */
  84:   layout: z.enum(SLIDE_LAYOUTS)
  85:     .default('title-paragraph'),
  86: 
  87:   /** Bullet points for structured, scannable content with enhanced validation */
  88:   bullets: z.array(VALIDATION_PATTERNS.shortText)
  89:     .max(10, 'Maximum 10 bullet points allowed for readability')
  90:     .refine(arr => arr.length === 0 || arr.every(item => item.trim().length > 0), 'Bullet points cannot be empty')
  91:     .optional(),
  92: 
  93:   /** Paragraph content for narrative or explanatory text with enhanced validation */
  94:   paragraph: VALIDATION_PATTERNS.longText
  95:     .refine(val => !val || val.split('\n').length <= 10, 'Paragraph should not exceed 10 lines for readability')
  96:     .optional(),
  97: 
  98:   /** Enhanced content items for flexible content structure */
  99:   contentItems: z.array(ContentItemSchema)
 100:     .max(15, 'Maximum 15 content items allowed')
 101:     .optional(),
 102: 
 103:   /** Two-column layout support - left column content with enhanced structure */
 104:   left: z.object({
 105:     heading: z.string().max(80, 'Heading too long for column').optional(),
 106:     bullets: z.array(VALIDATION_PATTERNS.shortText)
 107:       .max(8, 'Maximum 8 bullets per column for readability')
 108:       .optional(),
 109:     paragraph: VALIDATION_PATTERNS.longText.optional(),
 110:     metrics: z.array(z.object({
 111:       label: VALIDATION_PATTERNS.shortText,
 112:       value: z.string().max(20, 'Metric value too long'),
 113:       unit: z.string().max(10, 'Unit too long').optional()
 114:     })).max(5, 'Maximum 5 metrics per column').optional(),
 115:     imagePrompt: VALIDATION_PATTERNS.imagePrompt.optional() // New: Support for images in left column
 116:   }).optional(),
 117: 
 118:   /** Two-column layout support - right column content with enhanced image and metrics support */
 119:   right: z.object({
 120:     heading: z.string().max(80, 'Heading too long for column').optional(),
 121:     bullets: z.array(VALIDATION_PATTERNS.shortText)
 122:       .max(8, 'Maximum 8 bullets per column for readability')
 123:       .optional(),
 124:     paragraph: VALIDATION_PATTERNS.longText.optional(),
 125:     imagePrompt: VALIDATION_PATTERNS.imagePrompt.optional(),
 126:     metrics: z.array(z.object({
 127:       label: VALIDATION_PATTERNS.shortText,
 128:       value: z.string().max(20, 'Metric value too long'),
 129:       unit: z.string().max(10, 'Unit too long').optional()
 130:     })).max(5, 'Maximum 5 metrics per column').optional()
 131:   }).optional(),
 132: 
 133:   /** Enhanced chart configuration for comprehensive data visualization */
 134:   chart: z.object({
 135:     type: z.enum(['bar', 'line', 'pie', 'doughnut', 'area', 'scatter', 'column'], {
 136:       errorMap: () => ({ message: 'Chart type must be one of: bar, line, pie, doughnut, area, scatter, column' })
 137:     }),
 138:     title: z.string().max(100, 'Chart title too long').optional(),
 139:     subtitle: z.string().max(80, 'Chart subtitle too long').optional(),
 140:     categories: z.array(z.string().min(1, 'Category cannot be empty'))
 141:       .min(1, 'At least one category required')
 142:       .max(12, 'Maximum 12 categories for readability'),
 143:     series: z.array(z.object({
 144:       name: z.string().min(1, 'Series name is required').max(50, 'Series name too long'),
 145:       data: z.array(z.number()).min(1, 'At least one data point required'),
 146:       color: VALIDATION_PATTERNS.colorHex.optional()
 147:     })).min(1, 'At least one data series required').max(6, 'Maximum 6 data series for clarity'),
 148:     showLegend: z.boolean().default(true),
 149:     showDataLabels: z.boolean().default(false)
 150:   }).optional(),


------------------------------------------------------------
SECTION: GenerationParams schema (lines 220-280)
------------------------------------------------------------

📊 FILE STATS: 61 lines shown (758 total lines)

 220: export type SlideSpec = z.infer<typeof SlideSpecSchema>;
 221: 
 222: /**
 223:  * Enhanced schema for slide generation parameters
 224:  * Comprehensive validation and sanitization for AI-powered slide generation with multi-scenario support
 225:  */
 226: export const GenerationParamsSchema = z.object({
 227:   /** User's input prompt - the the core content description with enhanced validation */
 228:   prompt: z.string()
 229:     .min(10, 'Prompt must be at least 10 characters for meaningful content generation')
 230:     .max(2000, 'Prompt must be under 2000 characters for optimal AI processing')
 231:     .transform(str => str.trim())
 232:     .refine(val => val.length >= 10, 'Prompt cannot be mostly whitespace'),
 233: 
 234:   /** Target audience for content adaptation and tone with expanded options */
 235:   audience: z.enum([
 236:     'general', 'executives', 'technical', 'sales', 'investors', 'students',
 237:     'healthcare', 'education', 'marketing', 'finance', 'startup', 'government'
 238:   ], {
 239:     errorMap: () => ({ message: 'Invalid audience type. Must be one of the supported audience categories.' })
 240:   }).default('general'),
 241: 
 242:   /** Presentation tone and style with expanded emotional range */
 243:   tone: z.enum([
 244:     'professional', 'casual', 'persuasive', 'educational', 'inspiring',
 245:     'authoritative', 'friendly', 'urgent', 'confident', 'analytical'
 246:   ], {
 247:     errorMap: () => ({ message: 'Invalid tone type. Must be one of the supported tone styles.' })
 248:   }).default('professional'),
 249: 
 250:   /** Content length and detail level with more granular control */
 251:   contentLength: z.enum(['minimal', 'brief', 'moderate', 'detailed', 'comprehensive'], {
 252:     errorMap: () => ({ message: 'Invalid content length. Must be minimal, brief, moderate, detailed, or comprehensive.' })
 253:   }).default('moderate'),
 254: 
 255:   /** Presentation type for better content structuring */
 256:   presentationType: z.enum([
 257:     'general', 'pitch', 'report', 'training', 'proposal', 'update',
 258:     'analysis', 'comparison', 'timeline', 'process', 'strategy'
 259:   ]).default('general'),
 260: 
 261:   /** Industry context for specialized content */
 262:   industry: z.enum([
 263:     'general', 'technology', 'healthcare', 'finance', 'education', 'retail',
 264:     'manufacturing', 'consulting', 'nonprofit', 'government', 'startup'
 265:   ]).default('general'),
 266: 
 267:   /** Enhanced design preferences and branding */
 268:   design: z.object({
 269:     layout: z.enum(SLIDE_LAYOUTS).optional(),
 270:     layoutName: z.string().max(50, 'Layout name too long').optional(),
 271:     theme: z.string().max(50, 'Theme name too long').optional(),
 272:     brand: z.object({
 273:       primary: VALIDATION_PATTERNS.colorHex.optional(),
 274:       secondary: VALIDATION_PATTERNS.colorHex.optional(),
 275:       accent: VALIDATION_PATTERNS.colorHex.optional(),
 276:       fontFamily: VALIDATION_PATTERNS.fontFamily.optional(),
 277:       logo: VALIDATION_PATTERNS.url.optional()
 278:     }).optional(),
 279:     customColors: z.array(VALIDATION_PATTERNS.colorHex)
 280:       .max(5, 'Maximum 5 custom colors allowed')


================================================================================
3. 🤖 AI PROMPTS - System prompts and content generation templates
FILE: functions/src/prompts.ts
================================================================================


------------------------------------------------------------
SECTION: System prompt definition (lines 15-80)
------------------------------------------------------------

📊 FILE STATS: 66 lines shown (1806 total lines)

  15: /**
  16:  * Enhanced System prompt with modern prompt engineering techniques
  17:  * Incorporates chain-of-thought reasoning, specific examples, and quality enforcement
  18:  */
  19: export const SYSTEM_PROMPT = `You are an elite PowerPoint presentation architect with 15+ years of experience creating high-impact business presentations for Fortune 500 companies. You combine the expertise of a content strategist, UX designer, data storyteller, and executive communication specialist.
  20: 
  21: ## YOUR CORE EXPERTISE:
  22: - **Strategic Content**: Crafting persuasive, outcome-driven messaging that compels action and drives business results
  23: - **Visual Psychology**: Designing layouts that leverage cognitive science for maximum comprehension and retention
  24: - **Executive Communication**: Understanding C-suite decision-making patterns and information processing preferences
  25: - **Data Storytelling**: Transforming complex information into compelling narratives with clear insights
  26: - **Accessibility Excellence**: Ensuring content meets WCAG 2.1 AA standards while maintaining visual impact
  27: 
  28: ## QUALITY STANDARDS (NEVER COMPROMISE):
  29: 1. **Precision**: Every word must be purposeful, specific, and measurable - avoid vague language
  30: 2. **Impact**: Lead with outcomes, use active voice, create emotional resonance with quantified benefits
  31: 3. **Cognitive Load**: Structure content for 10-second comprehension (3-5 bullets optimal, 7 maximum)
  32: 4. **Executive Polish**: Boardroom-ready formatting, impeccable grammar, logical narrative flow
  33: 5. **Universal Access**: High contrast ratios, descriptive language, screen reader optimization
  34: 
  35: ## ENHANCED THINKING PROCESS (Follow this sequence):
  36: 1. **Strategic Analysis**: What specific business outcome does this slide need to achieve?
  37: 2. **Audience Psychology**: What are their pain points, motivations, and decision-making criteria?
  38: 3. **Narrative Architecture**: What story structure will create maximum persuasive impact?
  39: 4. **Visual Hierarchy**: Which layout will guide attention to the most critical information first?
  40: 5. **Quality Assurance**: Does this meet Fortune 500 presentation standards?
  41: 
  42: ## CRITICAL SUCCESS FACTORS:
  43: - **Specificity Over Generality**: Use precise metrics, dates, and outcomes instead of vague statements
  44: - **Context-Aware Content**: Ensure all data points feel realistic and contextually appropriate
  45: - **Action-Oriented**: Every slide should drive toward a clear decision or next step
  46: - **Stakeholder Value**: Focus on what matters most to the specific audience type
  47: 
  48: ## OUTPUT REQUIREMENTS:
  49: - **Format**: Valid JSON only, matching the exact schema provided
  50: - **Self-Validation**: Check against schema and quality standards before responding
  51: - **Excellence Target**: Aim for A+ grade content (95+ quality score)
  52: - **Consistency**: Maintain professional tone and formatting throughout
  53: 
  54: ## QUALITY BENCHMARKS:
  55: ✅ EXCELLENT Title: "Q4 Revenue: 34% Growth Exceeds $2.1M Target by 18%"
  56: ❌ POOR Title: "Q4 Results" or "Revenue Update"
  57: ✅ EXCELLENT Bullet: "Reduced customer acquisition cost from $150 to $90 (40% decrease) through targeted LinkedIn campaigns"
  58: ❌ POOR Bullet: "Marketing improved" or "Costs went down"
  59: ✅ EXCELLENT Insight: "Market expansion into APAC generated $600K new revenue within 90 days"
  60: ❌ POOR Insight: "We expanded to new markets"
  61: 
  62: ## CONTENT AUTHENTICITY GUIDELINES:
  63: - Use realistic, industry-appropriate metrics that feel genuine
  64: - Avoid obviously fabricated numbers (prefer ranges like 15-25% over exact figures like 23.7%)
  65: - Include contextual details that demonstrate deep understanding
  66: - Reference credible sources and methodologies when appropriate
  67: 
  68: Remember: You're creating content for high-stakes presentations where careers and millions of dollars are on the line. Mediocrity is not acceptable.
  69: 
  70: SCHEMA REFERENCE:
  71: ${JSON.stringify(SlideSpecSchema.shape, null, 2)}`;
  72: 
  73: /**
  74:  * Enhanced content length specifications with cognitive load optimization and 2024 minimalism focus
  75:  */
  76: export const CONTENT_LENGTH_SPECS = {
  77:   minimal: {
  78:     description: 'Absolute essentials: Maximum impact with minimum words (2024 minimalism trend)',
  79:     detail: 'Core message only - every word is critical',
  80:     focus: 'Single key insight or call-to-action; perfect for attention-grabbing slides',


------------------------------------------------------------
SECTION: Content generation prompts (lines 200-300)
------------------------------------------------------------

📊 FILE STATS: 101 lines shown (1806 total lines)

 200:   },
 201:   government: {
 202:     language: 'Policy-focused, public service oriented, regulatory terminology',
 203:     focus: 'Public benefit, policy implementation, stakeholder impact',
 204:     tone: 'Authoritative, transparent, service-oriented',
 205:     psychology: 'Build trust through transparency and public benefit',
 206:     structure: 'Issue → Policy → Implementation → Public Impact'
 207:   }
 208: };
 209: 
 210: /**
 211:  * Tone specifications for consistent voice and style
 212:  * Enhanced with 2024 trends: authenticity, inclusivity, and emotional intelligence.
 213:  */
 214: export const TONE_SPECIFICATIONS = {
 215:   professional: {
 216:     style: 'Polished, confident, and authoritative with modern authenticity',
 217:     language: 'Formal, precise, with industry-specific terminology and inclusive language',
 218:     approach: 'Evidence-based with clear logical flow and emotional intelligence',
 219:     triggers: 'Credibility, authority, trust, and relatability',
 220:     bulletStyle: 'Use concise, impact-driven phrases with action verbs'
 221:   },
 222:   casual: {
 223:     style: 'Friendly, approachable, conversational with genuine warmth',
 224:     language: 'Simple, relatable, everyday language with inclusive terms',
 225:     approach: 'Story-driven with human connection and humor where appropriate',
 226:     triggers: 'Relatability, engagement, warmth, and belonging',
 227:     bulletStyle: 'Use conversational, action-oriented phrases'
 228:   },
 229:   persuasive: {
 230:     style: 'Compelling, action-oriented, emotionally engaging with authentic urgency',
 231:     language: 'Benefit-driven, urgent, with power words and inclusive appeals',
 232:     approach: 'Problem-solution-benefit with strong calls to action and social proof',
 233:     triggers: 'Urgency, desire, trust, and collective impact',
 234:     bulletStyle: 'Use action verbs, focus on benefits and outcomes'
 235:   },
 236:   educational: {
 237:     style: 'Structured, informative, guiding with progressive complexity and inclusivity',
 238:     language: 'Explanatory, logical flow with clear definitions and diverse examples',
 239:     approach: 'Step-by-step buildup with questions and knowledge checks for all learning styles',
 240:     triggers: 'Curiosity, achievement, mastery, and practical application',
 241:     bulletStyle: 'Use sequential language, include "how to" elements'
 242:   },
 243:   inspiring: {
 244:     style: 'Motivational, uplifting, visionary with transformational energy and inclusivity',
 245:     language: 'Aspirational, emotionally resonant with future-focused imagery and diverse representation',
 246:     approach: 'Vision-driven with transformational messaging and collective possibility',
 247:     triggers: 'Hope, aspiration, identity, and shared purpose',
 248:     bulletStyle: 'Use aspirational language, paint vivid future states'
 249:   },
 250:   authoritative: {
 251:     style: 'Expert, commanding, definitive with unquestionable expertise and ethical responsibility',
 252:     language: 'Precise, technical, with industry authority and balanced perspectives',
 253:     approach: 'Fact-based with expert insights and proven methodologies',
 254:     triggers: 'Expertise, credibility, proven results, and trust',
 255:     bulletStyle: 'Use definitive statements, cite expertise and results'
 256:   },
 257:   friendly: {
 258:     style: 'Warm, approachable, supportive with personal connection and inclusivity',
 259:     language: 'Conversational, inclusive, with personal touches and diverse examples',
 260:     approach: 'Relationship-focused with empathy and understanding',
 261:     triggers: 'Connection, trust, support, and community',
 262:     bulletStyle: 'Use inclusive language, personal examples'
 263:   },
 264:   urgent: {
 265:     style: 'Time-sensitive, action-oriented, compelling with immediate focus and ethical urgency',
 266:     language: 'Direct, immediate, with time-based triggers and clear consequences',
 267:     approach: 'Problem-focused with immediate action requirements and solutions',
 268:     triggers: 'Urgency, scarcity, immediate action, and positive outcomes',
 269:     bulletStyle: 'Use action verbs, time-sensitive language'
 270:   },
 271:   confident: {
 272:     style: 'Assured, decisive, strong with unwavering conviction and humility',
 273:     language: 'Definitive, clear, with strong positioning and balanced views',
 274:     approach: 'Solution-focused with proven track record and forward-looking optimism',
 275:     triggers: 'Confidence, success, proven results, and inspiration',
 276:     bulletStyle: 'Use strong, definitive statements'
 277:   },
 278:   analytical: {
 279:     style: 'Data-driven, logical, systematic with methodical approach and critical thinking',
 280:     language: 'Precise, evidence-based, with analytical terminology and balanced analysis',
 281:     approach: 'Research-based with systematic analysis and conclusions',
 282:     triggers: 'Logic, evidence, systematic thinking, and insights',
 283:     bulletStyle: 'Use data points, logical progression, evidence-based statements'
 284:   }
 285: };
 286: 
 287: /**
 288:  * Advanced storytelling frameworks for content structure
 289:  * Enhanced with 2024 trends: micro-stories, interactive elements, and inclusive narratives.
 290:  */
 291: export const STORYTELLING_FRAMEWORKS = {
 292:   problemSolution: {
 293:     name: 'Problem-Solution-Impact',
 294:     structure: 'Pain Point → Solution → Transformation',
 295:     bestFor: 'Sales presentations, product launches, change management',
 296:     bulletPattern: ['Identify the challenge', 'Present the solution', 'Show the impact']
 297:   },
 298:   beforeAfter: {
 299:     name: 'Before-After-Bridge',
 300:     structure: 'Current State → Future State → Path Forward',


================================================================================
4. 🧠 AI PROCESSING - OpenAI integration and multi-step generation
FILE: functions/src/llm.ts
================================================================================


------------------------------------------------------------
SECTION: AI service setup and configuration (lines 1-50)
------------------------------------------------------------

📊 FILE STATS: 50 lines shown (382 total lines)

   1: /**
   2:  * Enhanced AI Language Model Service for Chained Slide Generation
   3:  *
   4:  * Innovative multi-step AI processing for superior slide quality:
   5:  * - Step 1: Generate core content focused on persuasion and clarity
   6:  * - Step 2: Refine layout for optimal UX and visual flow
   7:  * - Step 3: Generate/refine image prompts for emotional impact (if enabled)
   8:  * - Step 4: Final validation and styling refinement
   9:  * - Robust error handling, retries, and performance monitoring
  10:  *
  11:  * @version 3.2.0-enhanced
  12:  * @author AI PowerPoint Generator Team (enhanced by expert co-pilot)
  13:  */
  14: 
  15: import OpenAI from 'openai';
  16: import { safeValidateSlideSpec, type SlideSpec, type GenerationParams } from './schema';
  17: import { SYSTEM_PROMPT, generateContentPrompt, generateLayoutPrompt, generateImagePrompt, generateRefinementPrompt } from './prompts';
  18: import { defineSecret } from 'firebase-functions/params';
  19: import { getTextModelConfig, logCostEstimate } from './config/aiModels';
  20: 
  21: // Get AI configuration based on current mode (testing vs production)
  22: const AI_CONFIG = getTextModelConfig();
  23: 
  24: // Enhanced error types for better error handling
  25: export class AIGenerationError extends Error {
  26:   constructor(
  27:     message: string,
  28:     public readonly step: string,
  29:     public readonly attempt: number,
  30:     public readonly originalError?: Error
  31:   ) {
  32:     super(message);
  33:     this.name = 'AIGenerationError';
  34:   }
  35: }
  36: 
  37: export class ValidationError extends Error {
  38:   constructor(message: string, public readonly validationErrors: string[]) {
  39:     super(message);
  40:     this.name = 'ValidationError';
  41:   }
  42: }
  43: 
  44: export class TimeoutError extends Error {
  45:   constructor(message: string, public readonly timeoutMs: number) {
  46:     super(message);
  47:     this.name = 'TimeoutError';
  48:   }
  49: }
  50: 


------------------------------------------------------------
SECTION: Core AI generation logic (lines 190-320)
------------------------------------------------------------

📊 FILE STATS: 131 lines shown (382 total lines)

 190:  * @returns Promise<SlideSpec> - Parsed and validated spec from this step
 191:  */
 192: async function aiCallWithRetry(prompt: string, stepName: string, previousSpec?: Partial<SlideSpec>): Promise<SlideSpec> {
 193:   let lastError: Error | null = null;
 194: 
 195:   // Try with primary model
 196:   for (let attempt = 1; attempt <= AI_CONFIG.maxRetries; attempt++) {
 197:     try {
 198:       console.log(`${stepName} attempt ${attempt}/${AI_CONFIG.maxRetries} (model: ${AI_CONFIG.model})`);
 199: 
 200:       const result = await makeAICall(prompt, stepName, previousSpec, AI_CONFIG.model, attempt);
 201:       return result;
 202:     } catch (error) {
 203:       lastError = error as Error;
 204:       console.error(`${stepName} attempt ${attempt} failed:`, error);
 205: 
 206:       // Don't retry on validation errors - they indicate a fundamental issue
 207:       if (error instanceof ValidationError) {
 208:         throw new AIGenerationError(
 209:           `Validation failed in ${stepName}: ${error.message}`,
 210:           stepName,
 211:           attempt,
 212:           error
 213:         );
 214:       }
 215: 
 216:       if (attempt < AI_CONFIG.maxRetries) {
 217:         const backoffDelay = Math.min(AI_CONFIG.retryDelay * Math.pow(2, attempt - 1), AI_CONFIG.maxBackoffDelay);
 218:         console.log(`Retrying ${stepName} in ${backoffDelay}ms...`);
 219:         await new Promise(resolve => setTimeout(resolve, backoffDelay));
 220:       }
 221:     }
 222:   }
 223: 
 224:   // Try with fallback model if primary model failed
 225:   console.log(`${stepName} falling back to ${AI_CONFIG.fallbackModel}`);
 226:   try {
 227:     const result = await makeAICall(prompt, stepName, previousSpec, AI_CONFIG.fallbackModel, 1);
 228:     console.log(`${stepName} succeeded with fallback model`);
 229:     return result;
 230:   } catch (fallbackError) {
 231:     console.error(`${stepName} fallback failed:`, fallbackError);
 232: 
 233:     // Enhanced fallback mechanism for different steps
 234:     if (stepName === 'Content Generation') {
 235:       console.log('Creating enhanced fallback spec for content generation...');
 236:       return createFallbackSpec(prompt, previousSpec);
 237:     } else if (stepName === 'Layout Refinement' && previousSpec) {
 238:       console.log('Using previous spec with basic layout fallback...');
 239:       return {
 240:         ...previousSpec,
 241:         layout: previousSpec.layout || 'title-bullets'
 242:       } as SlideSpec;
 243:     } else if (stepName === 'Image Prompt Generation' && previousSpec) {
 244:       console.log('Continuing without image prompt...');
 245:       return previousSpec as SlideSpec;
 246:     }
 247: 
 248:     throw new AIGenerationError(
 249:       `All attempts failed for ${stepName}. Last error: ${lastError?.message}`,
 250:       stepName,
 251:       AI_CONFIG.maxRetries,
 252:       lastError || undefined
 253:     );
 254:   }
 255: }
 256: 
 257: /**
 258:  * Make a single AI API call with timeout and error handling
 259:  */
 260: async function makeAICall(
 261:   prompt: string,
 262:   stepName: string,
 263:   previousSpec: Partial<SlideSpec> | undefined,
 264:   model: string,
 265:   _attempt: number
 266: ): Promise<SlideSpec> {
 267:   const controller = new AbortController();
 268:   const timeoutId = setTimeout(() => controller.abort(), AI_CONFIG.timeoutMs);
 269: 
 270:   try {
 271:     const messages: Array<{ role: 'system' | 'user' | 'assistant'; content: string }> = [
 272:       { role: 'system', content: SYSTEM_PROMPT },
 273:       { role: 'user', content: prompt }
 274:     ];
 275: 
 276:     if (previousSpec) {
 277:       messages.push({ role: 'assistant', content: JSON.stringify(previousSpec) });
 278:     }
 279: 
 280:     const response = await getOpenAI().chat.completions.create({
 281:       model: model as any,
 282:       messages,
 283:       response_format: { type: 'json_object' },
 284:       temperature: AI_CONFIG.temperature,
 285:       max_tokens: AI_CONFIG.maxTokens
 286:     }, {
 287:       signal: controller.signal
 288:     });
 289: 
 290:     const rawJson = response.choices[0]?.message?.content;
 291:     if (!rawJson) {
 292:       throw new Error('Empty response from AI model');
 293:     }
 294: 
 295:     let parsed: any;
 296:     try {
 297:       parsed = JSON.parse(rawJson);
 298:     } catch (parseError) {
 299:       throw new Error(`Invalid JSON response: ${parseError}`);
 300:     }
 301: 
 302:     // Sanitize the parsed data to fix common AI model issues
 303:     const sanitized = sanitizeAIResponse(parsed);
 304: 
 305:     // Use safe validation to get detailed error information
 306:     const validationResult = safeValidateSlideSpec(sanitized);
 307:     if (!validationResult.success) {
 308:       throw new ValidationError(
 309:         'Slide specification validation failed',
 310:         validationResult.errors || ['Unknown validation error']
 311:       );
 312:     }
 313: 
 314:     return validationResult.data as SlideSpec;
 315:   } catch (error) {
 316:     if (error && typeof error === 'object' && 'name' in error && error.name === 'AbortError') {
 317:       throw new TimeoutError(`${stepName} timed out after ${AI_CONFIG.timeoutMs}ms`, AI_CONFIG.timeoutMs);
 318:     }
 319:     throw error;
 320:   } finally {


================================================================================
5. 🎨 THEME SYSTEM - Professional color schemes and styling
FILE: functions/src/professionalThemes.ts
================================================================================


------------------------------------------------------------
SECTION: Theme definitions and color palettes (lines 1-100)
------------------------------------------------------------

📊 FILE STATS: 100 lines shown (773 total lines)

   1: /**
   2:  * Unified Professional Theme System for Backend PowerPoint Generation
   3:  *
   4:  * Enhanced with 2024-inspired color palettes, advanced typography scales, and robust utilities for professional styling.
   5:  * Incorporates modern trends like soft pastels, earth tones, and vibrant accents for best-in-class presentations.
   6:  *
   7:  * @version 3.5.0-enhanced
   8:  * @author AI PowerPoint Generator Team (enhanced by expert co-pilot)
   9:  */
  10: 
  11: export interface ProfessionalTheme {
  12:   /** Unique theme identifier */
  13:   id: string;
  14: 
  15:   /** Human-readable theme name */
  16:   name: string;
  17: 
  18:   /** Theme category for organization */
  19:   category: 'corporate' | 'creative' | 'academic' | 'startup' | 'healthcare' | 'finance' | 'consulting' | 'technology' | 'modern' | 'vibrant' | 'natural';
  20: 
  21:   /** Enhanced color palette optimized for PowerPoint generation and accessibility */
  22:   colors: {
  23:     /** Primary brand color for titles and accents */
  24:     primary: string;
  25: 
  26:     /** Secondary color for supporting elements */
  27:     secondary: string;
  28: 
  29:     /** Accent color for highlights and emphasis */
  30:     accent: string;
  31: 
  32:     /** Background color for slides */
  33:     background: string;
  34: 
  35:     /** Surface color for content areas */
  36:     surface: string;
  37: 
  38:     /** Text colors for readability */
  39:     text: {
  40:       primary: string;   // Main text color
  41:       secondary: string; // Secondary text color
  42:       inverse: string;   // Text on dark backgrounds
  43:       muted: string;     // Muted text for less important content
  44:     };
  45: 
  46:     /** Semantic colors for status and feedback */
  47:     semantic: {
  48:       success: string;
  49:       warning: string;
  50:       error: string;
  51:       info: string;
  52:     };
  53: 
  54:     /** Border and divider colors */
  55:     borders: {
  56:       light: string;
  57:       medium: string;
  58:       strong: string;
  59:     };
  60:   };
  61: 
  62:   /** Enhanced typography settings for PowerPoint fonts with variable font support */
  63:   typography: {
  64:     headings: {
  65:       fontFamily: string; // PowerPoint-compatible font
  66:       fontWeight: {
  67:         light: number;
  68:         normal: number;
  69:         semibold: number;
  70:         bold: number;
  71:         extrabold: number;
  72:       };
  73:       sizes: {
  74:         display: number;  // Hero titles (48-56px)
  75:         h1: number;       // Main titles (32-40px)
  76:         h2: number;       // Section headers (24-32px)
  77:         h3: number;       // Subsection headers (18-24px)
  78:         h4: number;       // Small headings (16-20px)
  79:       };
  80:       lineHeight: {
  81:         tight: number;
  82:         normal: number;
  83:         relaxed: number;
  84:       };
  85:     };
  86:     body: {
  87:       fontFamily: string; // PowerPoint-compatible font
  88:       fontWeight: {
  89:         light: number;
  90:         normal: number;
  91:         medium: number;
  92:         semibold: number;
  93:       };
  94:       sizes: {
  95:         large: number;    // Emphasis text (18-20px)
  96:         normal: number;   // Body text (16px)
  97:         small: number;    // Captions (14px)
  98:         tiny: number;     // Very small text (12px)
  99:       };
 100:       lineHeight: {


------------------------------------------------------------
SECTION: Theme selection logic (lines 200-300)
------------------------------------------------------------

📊 FILE STATS: 101 lines shown (773 total lines)

 200:   techSans: '"JetBrains Sans", "Source Sans Pro", "Segoe UI", "Roboto", "Helvetica Neue", Arial, sans-serif',
 201:   displayFont: '"Segoe UI Black", "Arial Black", "Helvetica Neue", Arial, sans-serif',
 202:   corporateSerif: '"Minion Pro", "Adobe Garamond Pro", Georgia, "Times New Roman", Times, serif',
 203:   startupSans: '"Inter", "SF Pro Display", "Segoe UI", system-ui, sans-serif'
 204: } as const;
 205: 
 206: /**
 207:  * Enhanced typography configuration with modern font stacks and improved sizing
 208:  */
 209: function createModernTypography(
 210:   headingFont?: string,
 211:   bodyFont?: string,
 212:   scale: 'compact' | 'normal' | 'large' = 'normal'
 213: ) {
 214:   // Font scale multipliers for different presentation contexts
 215:   const scaleMultipliers = {
 216:     compact: 0.9,
 217:     normal: 1.0,
 218:     large: 1.1
 219:   };
 220: 
 221:   const multiplier = scaleMultipliers[scale];
 222: 
 223:   return {
 224:     headings: {
 225:       fontFamily: headingFont || MODERN_FONT_STACKS.modernSans,
 226:       fontWeight: { light: 300, normal: 400, semibold: 600, bold: 700, extrabold: 800 },
 227:       sizes: {
 228:         display: Math.round(52 * multiplier),
 229:         h1: Math.round(40 * multiplier),
 230:         h2: Math.round(32 * multiplier),
 231:         h3: Math.round(24 * multiplier),
 232:         h4: Math.round(20 * multiplier)
 233:       },
 234:       lineHeight: { tight: 1.1, normal: 1.25, relaxed: 1.4 }
 235:     },
 236:     body: {
 237:       fontFamily: bodyFont || MODERN_FONT_STACKS.readableSans,
 238:       fontWeight: { light: 300, normal: 400, medium: 500, semibold: 600 },
 239:       sizes: {
 240:         large: Math.round(20 * multiplier),
 241:         normal: Math.round(16 * multiplier),
 242:         small: Math.round(14 * multiplier),
 243:         tiny: Math.round(12 * multiplier)
 244:       },
 245:       lineHeight: { tight: 1.4, normal: 1.6, relaxed: 1.8 }
 246:     }
 247:   };
 248: }
 249: 
 250: /**
 251:  * Helper function to create complete theme objects with all required properties
 252:  * Enhanced with modern typography, improved visual hierarchy, and 2024 color trends
 253:  */
 254: function createTheme(
 255:   id: string,
 256:   name: string,
 257:   category: ProfessionalTheme['category'],
 258:   colors: {
 259:     primary: string;
 260:     secondary: string;
 261:     accent: string;
 262:     background?: string;
 263:     surface?: string;
 264:     textPrimary?: string;
 265:     textSecondary?: string;
 266:     textMuted?: string;
 267:   },
 268:   typography?: {
 269:     headingFont?: string;
 270:     bodyFont?: string;
 271:     scale?: 'compact' | 'normal' | 'large';
 272:   }
 273: ): ProfessionalTheme {
 274:   const baseBackground = colors.background || '#FFFFFF';
 275:   const baseSurface = colors.surface || '#F8FAFC';
 276: 
 277:   return {
 278:     id,
 279:     name,
 280:     category,
 281:     colors: {
 282:       primary: colors.primary,
 283:       secondary: colors.secondary,
 284:       accent: colors.accent,
 285:       background: baseBackground,
 286:       surface: baseSurface,
 287:       text: {
 288:         primary: colors.textPrimary || '#1F2937',
 289:         secondary: colors.textSecondary || '#6B7280',
 290:         inverse: '#FFFFFF',
 291:         muted: colors.textMuted || '#9CA3AF'
 292:       },
 293:       semantic: {
 294:         success: '#10B981',
 295:         warning: '#F59E0B',
 296:         error: '#EF4444',
 297:         info: colors.primary
 298:       },
 299:       borders: {
 300:         light: '#F3F4F6',


================================================================================
6. 📄 SLIDE BUILDERS - Core slide generation and layout logic
FILE: functions/src/slides/index.ts
================================================================================


------------------------------------------------------------
SECTION: Main slide building function (lines 100-130)
------------------------------------------------------------

📊 FILE STATS: 31 lines shown (167 total lines)

 100: };
 101: 
 102: /**
 103:  * Build a slide using the appropriate generator
 104:  */
 105: export function buildSlide(
 106:   type: SlideType,
 107:   config: any,
 108:   theme: import('../core/theme/tokens').ThemeTokens
 109: ): SlideBuildResult {
 110:   const generator = slideGenerators[type];
 111:   if (!generator) {
 112:     throw new Error(`Unknown slide type: ${type}`);
 113:   }
 114: 
 115:   return generator(config, theme);
 116: }
 117: 
 118: /**
 119:  * Validate slide configuration
 120:  */
 121: export function validateSlideConfig(type: SlideType, config: any): { valid: boolean; errors: string[] } {
 122:   const errors: string[] = [];
 123: 
 124:   // Basic validation
 125:   if (!config) {
 126:     errors.push('Configuration is required');
 127:     return { valid: false, errors };
 128:   }
 129: 
 130:   // Type-specific validation


================================================================================
7. 📊 POWERPOINT GENERATOR - Final PPTX file creation using PptxGenJS
FILE: functions/src/pptGenerator.ts
================================================================================


------------------------------------------------------------
SECTION: Main generatePpt function (lines 130-200)
------------------------------------------------------------

📊 FILE STATS: 71 lines shown (1805 total lines)

 130: /**
 131:  * Generate a PowerPoint file buffer from slide specifications
 132:  * Enhanced with style validation and quality assurance
 133:  *
 134:  * @param specs - Array of slide specifications
 135:  * @param validateStyles - Whether to perform style validation (default: true)
 136:  * @returns Promise<Buffer> - PowerPoint file buffer
 137:  */
 138: export async function generatePpt(specs: SlideSpec[], validateStyles: boolean = true): Promise<Buffer> {
 139:   console.log('🎯 generatePpt called with specs:', {
 140:     specsCount: specs.length,
 141:     specs: specs.map(spec => ({
 142:       title: spec.title,
 143:       layout: spec.layout,
 144:       hasParagraph: !!spec.paragraph,
 145:       paragraph: spec.paragraph?.substring(0, 100) + (spec.paragraph && spec.paragraph.length > 100 ? '...' : ''),
 146:       hasBullets: !!spec.bullets,
 147:       bulletsCount: spec.bullets?.length,
 148:       hasImagePrompt: !!spec.imagePrompt,
 149:       hasLeft: !!spec.left,
 150:       hasRight: !!spec.right
 151:     }))
 152:   });
 153: 
 154:   const pres = new pptxgen();
 155:   pres.layout = 'LAYOUT_WIDE';
 156: 
 157:   // 16:9 slide format constants
 158:   const SLIDE_WIDTH = 10.0;    // Standard 16:9 slide width
 159:   const SLIDE_HEIGHT = 5.625;  // Standard 16:9 slide height
 160:   const contentPadding = 0.75; // Enhanced padding for 16:9 format
 161:   const maxContentWidth = 8.5; // Optimized content width for 16:9
 162: 
 163:   // Style validation results for quality assurance
 164:   const validationResults: StyleValidationResult[] = [];
 165: 
 166:   for (let i = 0; i < specs.length; i++) {
 167:     const spec = specs[i];
 168: 
 169:     // Enhanced theme selection with modern theme support
 170:     const theme = getAppropriateTheme(spec);
 171:     const useModernTheme = isModernTheme(theme);
 172: 
 173:     // Validate slide style quality if enabled (only for traditional themes)
 174:     if (validateStyles && !useModernTheme) {
 175:       const styleValidation = validateSlideStyle(spec, theme as ProfessionalTheme);
 176:       validationResults.push(styleValidation);
 177: 
 178:       // Log style issues for debugging
 179:       if (styleValidation.issues.length > 0) {
 180:         console.log(`Style validation for slide "${spec.title}":`, {
 181:           score: styleValidation.score,
 182:           grade: styleValidation.grade,
 183:           issues: styleValidation.issues.map(i => i.message)
 184:         });
 185:       }
 186:     }
 187: 
 188:     const slide = pres.addSlide();
 189: 
 190:     // Use modern slide generation for modern themes
 191:     if (useModernTheme && isModernTheme(theme)) {
 192:       const modernTheme = theme;
 193: 
 194:       // Handle modern slide layouts
 195:       if (spec.layout === 'title' || spec.layout === 'hero') {
 196:         createModernHeroSlide(slide, {
 197:           title: spec.title,
 198:           subtitle: spec.paragraph,
 199:           author: spec.design?.author,
 200:           date: spec.design?.date,


------------------------------------------------------------
SECTION: Slide creation logic (lines 300-400)
------------------------------------------------------------

📊 FILE STATS: 101 lines shown (1805 total lines)

 300:     // Add tasteful decorations for title slides
 301:     if (spec.layout === 'title') {
 302:       addTitleSlideDecorations(slide, traditionalTheme);
 303:     }
 304: 
 305:     // Enhanced dynamic layout handling with comprehensive support
 306:     await renderSlideLayout(slide, spec, traditionalTheme, contentPadding, maxContentWidth);
 307: 
 308:     // Footer: page number
 309:     const pageNumber = `${i + 1}/${specs.length}`;
 310:     slide.addText(pageNumber, {
 311:       x: SLIDE_WIDTH - 1.5,
 312:       y: SLIDE_HEIGHT - 0.4,
 313:       w: 1.0,
 314:       h: 0.3,
 315:       fontSize: Math.min(traditionalTheme.typography.body.sizes.tiny, 10),
 316:       color: safeColorFormat(traditionalTheme.colors.text.secondary),
 317:       align: 'right',
 318:       valign: 'middle'
 319:     });
 320: 
 321:     // Add notes and sources (enhanced with formatting)
 322:     let notesText = spec.notes || '';
 323:     if (spec.sources?.length) notesText += `\n\nSources:\n${spec.sources.join('\n')}`;
 324:     slide.addNotes(notesText);
 325:   }
 326: 
 327:   // Write the presentation to buffer
 328:   return (await pres.write({ outputType: 'nodebuffer' })) as Buffer;
 329: }
 330: 
 331: /**
 332:  * Comprehensive slide layout renderer supporting all layout types
 333:  * Enhanced with improved spacing, professional positioning, and modern visual elements
 334:  */
 335: async function renderSlideLayout(slide: pptxgen.Slide, spec: SlideSpec, theme: ProfessionalTheme, contentPadding: number, maxContentWidth: number): Promise<void> {
 336:   console.log('🎯 renderSlideLayout called with:', {
 337:     title: spec.title,
 338:     layout: spec.layout,
 339:     hasBullets: !!spec.bullets,
 340:     bulletsCount: spec.bullets?.length,
 341:     hasRightImage: !!spec.right?.imagePrompt,
 342:     hasLeftImage: !!spec.left?.imagePrompt
 343:   });
 344: 
 345:   // Optimized 16:9 layout constants for professional spacing
 346:   const contentY = 1.6;        // Optimized starting Y position below title
 347:   const columnWidth = 4.0;     // Optimized column width for 16:9
 348:   const columnGap = 0.5;       // Standard gap between columns
 349: 
 350:   switch (spec.layout) {
 351:     case 'title':
 352:       // Title already rendered by caller; keep slide clean
 353:       break;
 354: 
 355:     case 'title-bullets':
 356:       if (spec.bullets) addBullets(slide, spec.bullets, theme, contentPadding, contentY, maxContentWidth);
 357:       break;
 358: 
 359:     case 'title-paragraph':
 360:       if (spec.paragraph) addParagraph(slide, spec.paragraph, theme, contentPadding, contentY, maxContentWidth);
 361:       break;
 362: 
 363:     case 'two-column':
 364:       if (spec.left) await addColumnContent(slide, spec.left as ExtendedColumnContent, theme, contentPadding, contentY, columnWidth);
 365:       if (spec.right) await addColumnContent(slide, spec.right as ExtendedColumnContent, theme, contentPadding + columnWidth + columnGap, contentY, columnWidth, true);
 366:       break;
 367: 
 368:     case 'mixed-content':
 369:       await renderMixedContent(slide, spec, theme, contentY);
 370:       break;
 371: 
 372:     case 'image-right':
 373:       await renderImageRight(slide, spec, theme, contentY);
 374:       break;
 375: 
 376:     case 'image-left':
 377:       await renderImageLeft(slide, spec, theme, contentY);
 378:       break;
 379: 
 380:     case 'image-full':
 381:       await renderImageFull(slide, spec, theme);
 382:       break;
 383: 
 384:     case 'quote':
 385:       if (spec.paragraph) addParagraph(slide, spec.paragraph, theme, 1.0, contentY, 8.0, true);
 386:       break;
 387: 
 388:     case 'chart':
 389:       if (spec.chart) addChart(slide, spec.chart, theme, 1.0, contentY, 8.0, 4.0);
 390:       break;
 391: 
 392:     case 'comparison-table':
 393:       if (spec.comparisonTable) renderComparisonTable(slide, spec.comparisonTable, theme, contentY);
 394:       break;
 395: 
 396:     case 'timeline':
 397:       if (spec.timeline) renderTimeline(slide, spec.timeline, theme, contentY);
 398:       break;
 399: 
 400:     case 'process-flow':


================================================================================
8. 🎨 MODERN SLIDE GENERATORS - Advanced visual design and layouts
FILE: functions/src/slides/modernSlideGenerators.ts
================================================================================


------------------------------------------------------------
SECTION: Modern content slide creation (lines 130-180)
------------------------------------------------------------

📊 FILE STATS: 51 lines shown (447 total lines)

 130: 
 131: /**
 132:  * Modern content slide with enhanced visual hierarchy
 133:  */
 134: export function createModernContentSlide(
 135:   slide: any,
 136:   config: {
 137:     title: string;
 138:     content: string[];
 139:     layout?: 'bullets' | 'cards' | 'timeline';
 140:     accentColor?: string;
 141:   },
 142:   theme: ModernTheme
 143: ): void {
 144:   // Title with accent underline - optimized for 16:9
 145:   slide.addText(config.title, {
 146:     x: 0.75, // Better left margin for 16:9
 147:     y: 0.4,  // Higher positioning for more content space
 148:     w: 8.5,  // Optimized width for 16:9
 149:     h: 0.8,
 150:     fontSize: theme.typography.fontSizes.h1,
 151:     fontFace: theme.typography.fontFamilies.heading,
 152:     color: safeColorFormat(theme.palette.text.primary),
 153:     bold: true,
 154:     lineSpacing: theme.typography.lineHeights.tight * 100
 155:   });
 156: 
 157:   // Accent underline
 158:   const accentLine = createAccentElement(0.75, 1.3, 2, 0.05, theme, 'pill');
 159:   slide.addShape('rect', accentLine);
 160: 
 161:   const contentY = 1.6;  // Higher content start for more space
 162:   const itemHeight = 0.7; // Slightly smaller for better fit
 163:   const itemSpacing = 0.1;
 164: 
 165:   config.content.forEach((item, index) => {
 166:     const y = contentY + (index * (itemHeight + itemSpacing));
 167: 
 168:     if (config.layout === 'cards') {
 169:       // Card-based layout
 170:       const cardBg = createModernCardBackground(0.5, y, 9, itemHeight, theme, 'subtle');
 171:       slide.addShape('rect', cardBg);
 172: 
 173:       // Bullet point as colored circle
 174:       const bulletColor = config.accentColor || theme.palette.primary;
 175:       slide.addShape('ellipse', {
 176:         x: 0.8,
 177:         y: y + 0.25,
 178:         w: 0.15,
 179:         h: 0.15,
 180:         fill: { color: safeColorFormat(bulletColor) },


================================================================================
9. ⚙️ AI CONFIGURATION - Model settings and cost tracking
FILE: functions/src/config/aiModels.ts
================================================================================


------------------------------------------------------------
SECTION: AI model configuration (lines 1-50)
------------------------------------------------------------

📊 FILE STATS: 50 lines shown (167 total lines)

   1: /**
   2:  * AI Model Configuration for Testing vs Production
   3:  * 
   4:  * This file centralizes AI model configuration to easily switch between
   5:  * low-cost testing models and high-quality production models.
   6:  */
   7: 
   8: // Environment detection
   9: const isProduction = process.env.NODE_ENV === 'production';
  10: const isTestingMode = process.env.AI_TESTING_MODE === 'true' || !isProduction;
  11: 
  12: /**
  13:  * Text Generation Model Configuration
  14:  */
  15: export const TEXT_MODEL_CONFIG = {
  16:   // Testing Mode: Low-cost models for development
  17:   testing: {
  18:     model: 'gpt-4o-mini' as const,
  19:     fallbackModel: 'gpt-3.5-turbo' as const,
  20:     temperature: 0.7,
  21:     maxTokens: 1500,
  22:     maxRetries: 2,
  23:     retryDelay: 500,
  24:     timeoutMs: 20000,
  25:     maxBackoffDelay: 5000,
  26:     costPerToken: 0.00015 // GPT-4o Mini: $0.15 per 1M input tokens
  27:   },
  28: 
  29:   // Production Mode: High-quality models for best results
  30:   production: {
  31:     model: 'gpt-4o-mini' as const,
  32:     fallbackModel: 'gpt-4o' as const,
  33:     temperature: 0.7,
  34:     maxTokens: 2000,
  35:     maxRetries: 3,
  36:     retryDelay: 1000,
  37:     timeoutMs: 30000,
  38:     maxBackoffDelay: 10000,
  39:     costPerToken: 0.00015 // GPT-4o Mini: $0.15 per 1M input tokens, $0.60 per 1M output tokens
  40:   }
  41: };
  42: 
  43: /**
  44:  * Image Generation Model Configuration
  45:  */
  46: export const IMAGE_MODEL_CONFIG = {
  47:   // Testing Mode: DALL-E 2 for cost efficiency
  48:   testing: {
  49:     model: 'dall-e-2' as const,
  50:     size: '512x512' as const,


================================================================================
🔍 ANALYSIS QUESTIONS FOR AI REVIEW
================================================================================

1. CODE ARCHITECTURE:
   - Is the separation of concerns clear and logical?
   - Are there any architectural improvements you'd suggest?

2. ERROR HANDLING:
   - Is error handling comprehensive throughout the flow?
   - Are there edge cases that aren't properly handled?

3. PERFORMANCE:
   - Are there any performance bottlenecks in the code?
   - Could any operations be optimized or cached?

4. CODE QUALITY:
   - Is the code readable and well-documented?
   - Are there any code smells or anti-patterns?

5. POWERPOINT GENERATION:
   - Is the PptxGenJS integration efficient and robust?
   - Are the slide layouts and styling professional?

6. AI INTEGRATION:
   - Are the OpenAI prompts well-engineered?
   - Is the multi-step AI processing effective?


